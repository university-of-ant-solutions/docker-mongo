#!/bin/sh

###
# HOW THIS WORK
#
# 1. TRY TO PULL DOCKER IMAGES FROM GITLAB; IF exist THEN QUIT
# 2. WRITE DOCKERFILE
# 3. BUILD AND PUSH
#
# If you want to rebuild, delete images on gitlab
#
# Test
#
# ./scripts/custom-docker-build mongo-3.4.10 "registry.gitlab.com/particle4dev/docker-mongo:mongo-3.4.10"
###

set -e
IFS=$'\n\t'

function fileExists {
if [ -f $1 ]; then
  return 0
fi
return 1
}

function parse_arguments() {
  read base
  read base_version
  printf -- "-f $Dockerfile " "$base"
  
  while read image; do
    read version
    case "$image" in
      dumb) dumb_version=$version ;;
      *) exit 1;;
    esac
  done

  templates -d=$dumb_version -b=$base -v=$base_version $CI_PROJECT_DIR/Dockerfile.template
}

# templates -u=123 -p=345 ./bin/utils/attachments.tmpl
function templates {
  for i in "$@"
  do
  case $i in
  -b=*|--base=*)
  CUSTOM_IMAGE_NAME="${i#*=}"
  shift
  ;;
  -v=*|--version=*)
  CUSTOM_IMAGE_VERSION="${i#*=}"
  shift
  ;;
  -d=*|--dumb=*)
  DUMB_VERSION="${i#*=}"
  shift
  ;;
  *)
  # unknown option
  ;;
  esac
  done

  if ! fileExists $@; then
    echo "not found file"
    return 1
  fi

  while IFS='' read -r line || [[ -n "$line" ]]; do
    echo $line | sed -e "s;%CUSTOM_IMAGE_NAME%;$CUSTOM_IMAGE_NAME;g" -e "s;%CUSTOM_IMAGE_VERSION%;$CUSTOM_IMAGE_VERSION;g" -e "s;%DUMB_VERSION%;$DUMB_VERSION;g" >> $Dockerfile
  done < $@
}


function generate_command() {
  buildimage_name=$1; shift;

  printf -- "docker build "
  echo $buildimage_name | tr '-' '\n' | parse_arguments

  for i in "$@"
  do
    printf -- "%s " "$i"
  done
  printf -- ".\\n"
}

if [ -z $CI_PROJECT_DIR ];
then
  CI_PROJECT_DIR=$(pwd)
fi

# try to build docker images
# exitCode=$($CI_PROJECT_DIR/scripts/pull-docker-image | tail -n 1)
# if [ $exitCode -eq "0" ]; then
#   echo "FOUND $CI_REGISTRY_IMAGE:$CI_JOB_NAME"; exit 0;
# fi

Dockerfile="$CI_PROJECT_DIR/Dockerfile"

# Empty file
if fileExists $Dockerfile; then
  cp /dev/null $Dockerfile
fi

docker_command=$(generate_command $@)
echo "$1: executing $docker_command"
eval $docker_command
